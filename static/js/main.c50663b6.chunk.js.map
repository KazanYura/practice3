{"version":3,"sources":["components/Home.js","charts/MapChart.js","components/DominantReligion.js","charts/ChangeMap.js","components/ChristChange.js","charts/MuslimMap.js","components/Muslims.js","charts/NotRel.js","components/Unaffiliated.js","App.js","index.js"],"names":["Home","id","React","Component","religions_to_color","religions","MapChart","max_id","max_p","setTooltipContent","county_to_dom_religion","data_import","JSON","parse","localStorage","getItem","Object","entries","forEach","element","parseInt","index","length","e","replace","parseFloat","data-tip","projectionConfig","scale","geography","geographies","map","geo","NAME","properties","fill","stroke","onMouseEnter","onMouseLeave","rsmKey","memo","DominantReligion","state","content","className","setState","this","colorScale","scaleQuantize","domain","range","county_to_dom_religion_1","county_to_dom_religion_2","hasOwnProperty","ChristChange","direction","labelMargin","MuslimsPage","UnaffiliatedPage","old_keys","App","useEffect","csv","process","then","data","earray","j","o","edata","i","push","clear","setItem","stringify","to","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c50663b6.chunk.js","sourcesContent":["import React from \"react\";\nimport '../style/home.css';\nclass Home extends React.Component{\n\n    render(){\n        return(\n    <div id=\"main_body\">\n      <h1>Опис:</h1>\n      <p>Цей сайт був розроблений,як виконання практичної 3 та 4 з курсу \"Візуалізація данних\". \n        Відповідно до цього він поділений на сторінки (\"Практична 3\" та \"Практична 4\").\n        Кожна із них теж має свій поділ для збереження максимальної зрозумілості та зменшення густини інформації.\n      </p>\n      <p>Сторінка <strong>\"Практична 3\"</strong> містить підсторінки,що відповідають на питання практичної,а саме:</p>\n        <ol>\n          <li>Домінантна релігія у 2010 році за країнами світу.</li>\n          <li>Різниця між кількістю християн у 2010 та 2050 роках за країнами світу.</li>\n          <li>Кількість людей, не афілійованих з жодною релігією у 2010 році за країнами світу</li>\n          <li>Частка мусульман у 2010 році за країнами світу</li>\n        </ol>\n        <p>Біля кожної карти можна побачити пояснення її використання та аналіз отриманих результатів</p>\n      <p><strong>Автор: Казан Юрій</strong></p>\n    </div>)\n    }\n}\nexport default Home;","import React, { memo } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\nconst religions_to_color= {\"Buddhists\":\"#66c2a5\",\"Christians\":\"#fc8d62\",\"Folk Religions\":\"#8da0cb\",\"Hindus\":\"#e78ac3\",\"Muslims\":\"#a6d854\",\"Other Religions\":\"#ffd92f\",\"Unaffiliated\":\"#b3b3b3\"  }\nconst religions = [\"Buddhists\",\"Christians\",\"Folk Religions\",\"Hindus\",\"Jews\",\"Muslims\",\"Other Religions\",\"Unaffiliated\"]\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapChart = ({ setTooltipContent }) => {\n    let max_id;\n    let max_p;\n    let county_to_dom_religion = {};\n    let data_import = JSON.parse(localStorage.getItem('data'));\n    Object.entries(data_import).forEach(element => {\n            if (parseInt(element[1][2]) === 100 && parseInt(element[1][0]) === 2010){\n                max_p = 0;\n                max_id = -1;\n                for (let index = 3; index < element[1].length; index++) {\n                    let e = element[1][index];\n                    e = e.replace('<',\"\");\n                    e = e.replace('>',\"\");\n                    if (parseFloat(e) > max_p){\n                            max_p = parseFloat(e);\n                            max_id = index;\n                    }\n                }\n                county_to_dom_religion[element[1][1]] = religions[max_id - 3]\n            }\n    });\n  return (\n    <>\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => {\n                const { NAME } = geo.properties;\n                  return(\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={religions_to_color[county_to_dom_religion[NAME]]}\n                  stroke={\"rgb(0,0,0)\"}\n                  onMouseEnter={() => {\n                    const { NAME } = geo.properties;\n                    setTooltipContent(`${NAME} — ${county_to_dom_religion[NAME]}`);\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                />);\n                })\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);","import React from 'react';\nimport MapChart from '../charts/MapChart';\nimport ReactTooltip from \"react-tooltip\";\nimport { LegendThreshold } from '@vx/legend';\nimport '../style/views.css';\nimport {scaleQuantize} from 'd3-scale';\nclass DominantReligion extends React.Component{\n    state = {\n        content: \"\"\n    }\n    \n    render(){\n        return(\n            <div id=\"main_body\">\n                <p>\n                    Ця карта показує домінанту релігію для кожної із країн. <br/>\n                    На ній існують декілька \"чорних\" точок невизначеності із двох причин: або даний регіон не є постійно заселений,або по ньому немає данних у датасеті.<br/>\n                    При наведені курсором на країну буде показана її назва і домінанта релігія. Був обраний такий спосіб візуалізації, бо він є найпростішим у даному варіанті.<br/>\n                    І при існуванні функції наведення і отримання потрібної інформації відпадає потреба у додатковому поясненні що означає кожен із кольорів.<br/>\n                    З карти бачимо,що найпоширеніша релігія це християнство. Також є релігії однієї країни (Іудаїзм в Ізраєлі)<br/>\n                </p>\n                <div className='cube'>\n                <MapChart setTooltipContent={(content) => this.setState({content:content})}/>\n                <ReactTooltip>{this.state.content}</ReactTooltip>\n                </div>\n            </div>)\n    }\n}\nexport default DominantReligion;","import React, { memo } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\nimport {scaleQuantize} from 'd3-scale';\nconst colorScale = scaleQuantize()\n.domain([-20, 80])\n.range([\n    \"#4292B9\",\n    \"#70C4BC\",\n    \"#8FD79F\",\n    \"#B2E782\",\n    \"#FFEA61\",\n    \"#FFF54E\",\n    \"#FFDD3C\",\n    \"#FED303\"\n]);\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapChart = ({ setTooltipContent }) => {\n    let county_to_dom_religion_1 = {};\n    let county_to_dom_religion_2 = {};\n    let county_to_dom_religion = {};\n    let data_import = JSON.parse(localStorage.getItem('data'));\n    Object.entries(data_import).forEach(element => {\n            if (parseInt(element[1][2]) !== 100 && parseInt(element[1][0]) === 2010){\n              let e = element[1][2];\n              e = e.replace('<',\"\");\n              e = e.replace('>',\"\");\n              county_to_dom_religion_1[element[1][1]] = parseInt(e);\n            }\n            if (parseInt(element[1][2]) !== 100 && parseInt(element[1][0]) === 2050){\n                let e = element[1][2];\n                e = e.replace('<',\"\");\n                e = e.replace('>',\"\");\n                county_to_dom_religion_2[element[1][1]] = parseInt(e);\n                if (county_to_dom_religion_1.hasOwnProperty(element[1][1]) && (!county_to_dom_religion.hasOwnProperty(element[1][1]))){\n                    county_to_dom_religion[element[1][1]] = (county_to_dom_religion_2[element[1][1]] - county_to_dom_religion_1[element[1][1]]) / 1000000;\n                }\n            }\n    });\n  return (\n    <>\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => {\n                const { NAME } = geo.properties;\n                  return(\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={colorScale(county_to_dom_religion[NAME])}\n                  stroke={\"rgb(0,0,0)\"}\n                  onMouseEnter={() => {\n                    const { NAME } = geo.properties;\n                    setTooltipContent(`${NAME} — ${county_to_dom_religion[NAME]} millions`);\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                />);\n                })\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);","import React from 'react';\nimport MapChart from '../charts/ChangeMap';\nimport ReactTooltip from \"react-tooltip\";\nimport { LegendThreshold } from '@vx/legend';\nimport '../style/views.css';\nimport {scaleQuantize} from 'd3-scale';\nclass ChristChange extends React.Component{\n    state = {\n        content: \"\"\n    }\n    \n    render(){\n        const colorScale = scaleQuantize()\n        .domain([-20, 80])\n        .range([\n            \"#4292B9\",\n            \"#70C4BC\",\n            \"#8FD79F\",\n            \"#B2E782\",\n            \"#FFEA61\",\n            \"#FFF54E\",\n            \"#FFDD3C\",\n            \"#FED303\"\n        ]);\n        return(\n            <div id=\"main_body\">\n                <p>\n                    Ця карта показує прогнозовані зміни у кількості християн до 2050 року. <br/>\n                    На ній існують декілька \"чорних\" точок невизначеності із двох причин: або даний регіон не є постійно заселений,або по ньому немає данних у датасеті.<br/>\n                    При наведені курсором на країну буде показана її назва і зміна у мільйонах. (власне сама карта теж подана у мільйонах) <br/>\n                    Також над мапою наведені умовні \"зони\",щоб можливо було оцінити рух розвитку християнства.<br/>\n                    Бачимо,що основним центром зростання кількості християн можна вважати Африку та Америки. Ситуація в Європі прямує у протилежну сторону.<br/>\n                </p>\n                <LegendThreshold\n                scale={colorScale}\n                direction=\"row\"\n                labelMargin=\"0 15px 0 0\"\n                />\n                <div className='cube'>\n                <MapChart setTooltipContent={(content) => this.setState({content:content})}/>\n                <ReactTooltip>{this.state.content}</ReactTooltip>\n                </div>\n            </div>)\n    }\n}\nexport default ChristChange;","import React, { memo } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\nimport {scaleQuantize} from 'd3-scale';\nconst colorScale = scaleQuantize()\n.domain([1, 100])\n.range([\n  \"#ffedea\",\n  \"#ffcec5\",\n  \"#ffad9f\",\n  \"#ff8a75\",\n  \"#ff5533\",\n  \"#e2492d\",\n  \"#be3d26\",\n  \"#9a311f\",\n  \"#782618\"\n]);\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapChart = ({ setTooltipContent }) => {\n    let county_to_dom_religion = {};\n    let data_import = JSON.parse(localStorage.getItem('data'));\n    Object.entries(data_import).forEach(element => {\n            if (parseInt(element[1][2]) === 100 && parseInt(element[1][0]) === 2010){\n              let e = element[1][8];\n              e = e.replace('<',\"\");\n              e = e.replace('>',\"\");\n              county_to_dom_religion[element[1][1]] = parseInt(e);\n            }\n    });\n  return (\n    <>\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => {\n                const { NAME } = geo.properties;\n                  return(\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={colorScale(county_to_dom_religion[NAME])}\n                  stroke={\"rgb(0,0,0)\"}\n                  onMouseEnter={() => {\n                    const { NAME } = geo.properties;\n                    setTooltipContent(`${NAME} — ${county_to_dom_religion[NAME]}`);\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                />);\n                })\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);","import React from 'react';\nimport MapChart from '../charts/MuslimMap';\nimport ReactTooltip from \"react-tooltip\";\nimport { LegendThreshold } from '@vx/legend';\nimport '../style/views.css';\nimport {scaleQuantize} from 'd3-scale';\nclass MuslimsPage extends React.Component{\n    state = {\n        content: \"\"\n    }\n    \n    render(){\n        const colorScale = scaleQuantize()\n.domain([1, 100])\n.range([\n  \"#ffedea\",\n  \"#ffcec5\",\n  \"#ffad9f\",\n  \"#ff8a75\",\n  \"#ff5533\",\n  \"#e2492d\",\n  \"#be3d26\",\n  \"#9a311f\",\n  \"#782618\"\n]);\n        return(\n            <div id=\"main_body\">\n                <p>\n                    Ця карта показує частку мусульман для кожної із країн (станом на 2010 рік). <br/>\n                    На ній існують декілька \"чорних\" точок невизначеності із двох причин: або даний регіон не є постійно заселений,або по ньому немає данних у датасеті.<br/>\n                    При наведені курсором на країну буде показана її назва і частка мусульман.<br/>\n                    Також над мапою наведені умовні \"зони\",щоб можливо було оцінити найбільший регіон мусульманства.<br/>\n                    Як і очікувалося найбільша частка мусульман це територія Північної Африки та Близький Схід.<br/>\n                </p>\n                <LegendThreshold\n                scale={colorScale}\n                direction=\"row\"\n                labelMargin=\"0 15px 0 0\"\n                />\n                <div className='cube'>\n                <MapChart setTooltipContent={(content) => this.setState({content:content})}/>\n                <ReactTooltip>{this.state.content}</ReactTooltip>\n                </div>\n            </div>)\n    }\n}\nexport default MuslimsPage;","import React, { memo } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\nimport {scaleQuantize} from 'd3-scale';\nconst colorScale = scaleQuantize()\n.domain([1, 100])\n.range([\n  \"#ffedea\",\n  \"#ffcec5\",\n  \"#ffad9f\",\n  \"#ff8a75\",\n  \"#ff5533\",\n  \"#e2492d\",\n  \"#be3d26\",\n  \"#9a311f\",\n  \"#782618\"\n]);\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapChart = ({ setTooltipContent }) => {\n    let county_to_dom_religion = {};\n    let data_import = JSON.parse(localStorage.getItem('data'));\n    Object.entries(data_import).forEach(element => {\n            if (parseInt(element[1][2]) === 100 && parseInt(element[1][0]) === 2010){\n              let e = element[1][10];\n              e = e.replace('<',\"\");\n              e = e.replace('>',\"\");\n              county_to_dom_religion[element[1][1]] = parseFloat(e);\n            }\n    });\n  return (\n    <>\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => {\n                const { NAME } = geo.properties;\n                  return(\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={colorScale(county_to_dom_religion[NAME])}\n                  stroke={\"rgb(0,0,0)\"}\n                  onMouseEnter={() => {\n                    const { NAME } = geo.properties;\n                    setTooltipContent(`${NAME} — ${county_to_dom_religion[NAME]}`);\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                />);\n                })\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);","import React from 'react';\nimport MapChart from '../charts/NotRel';\nimport ReactTooltip from \"react-tooltip\";\nimport { LegendThreshold } from '@vx/legend';\nimport '../style/views.css';\nimport {scaleQuantize} from 'd3-scale';\nclass UnaffiliatedPage extends React.Component{\n    state = {\n        content: \"\"\n    }\n    \n    render(){\n        const colorScale = scaleQuantize()\n.domain([1, 100])\n.range([\n  \"#ffedea\",\n  \"#ffcec5\",\n  \"#ffad9f\",\n  \"#ff8a75\",\n  \"#ff5533\",\n  \"#e2492d\",\n  \"#be3d26\",\n  \"#9a311f\",\n  \"#782618\"\n]);\n        return(\n            <div id=\"main_body\">\n                <p>\n                    Ця карта показує частку не афілійованих до жодної релігії людей для кожної із країн (станом на 2010 рік). <br/>\n                    На ній існують декілька \"чорних\" точок невизначеності із двох причин: або даний регіон не є постійно заселений,або по ньому немає данних у датасеті.<br/>\n                    При наведені курсором на країну буде показана її назва і частка не афілійованих.<br/>\n                    Також над мапою наведені умовні \"зони\",щоб можливо було оцінити найбільший регіон не афілійованих.<br/>\n                    Бачимо,що основним осередком такого руху є Китай,Японія та Кореї.<br/>\n                </p>\n                <LegendThreshold\n                scale={colorScale}\n                direction=\"row\"\n                labelMargin=\"0 15px 0 0\"\n                />\n                <div className='cube'>\n                <MapChart setTooltipContent={(content) => this.setState({content:content})}/>\n                <ReactTooltip>{this.state.content}</ReactTooltip>\n                </div>\n            </div>)\n    }\n}\nexport default UnaffiliatedPage;","import React from \"react\";\nimport {\n  Route,\n  NavLink,\n  HashRouter\n} from \"react-router-dom\";\n\nimport Home from './components/Home';\nimport DominantReligion from './components/DominantReligion';\nimport {useEffect} from 'react';\nimport { csv } from \"d3-fetch\";\nimport ChristChange from './components/ChristChange'\nimport MuslimsPage from \"./components/Muslims\";\nimport UnaffiliatedPage from \"./components/Unaffiliated\";\n\nlet old_keys = [\"Year\",\"Country\",\"Christians\",\"Muslims\",\"Unaffiliated\",\"Hindus\",\"Buddhists\",\"Folk Religions\",\"Other Religions\",\"Jews\",\"All Religions\"]\nfunction App() {\n  useEffect(() => {\n    csv(process.env.PUBLIC_URL + `/data.csv`).then((data) => {\n      let earray = {}\n      for (let j = 0; j < data.length; j++){\n          let o = data[j];\n          let edata = [];\n        for (let i = 0; i < old_keys.length; i++){\n          edata.push(o[old_keys[i]]);\n        }\n        earray[j] = edata;\n    }\n      if (localStorage.getItem(\"data\") !== null){\n        localStorage.clear();\n        localStorage.setItem(\"data\",JSON.stringify(earray));\n      }\n  });\n  });\n  return (\n    <HashRouter>\n        <div>\n          <h1>Візуалізація релігій світу</h1>\n          <ul className=\"header\">\n            <li><NavLink to=\"/\">Домашня сторінка</NavLink></li>\n            <li><NavLink to=\"/dom\">Домінуюча релігія</NavLink></li>\n            <li><NavLink to=\"/mus\">Відсоток мусульман</NavLink></li>\n            <li><NavLink to=\"/unaf\">Відсоток не афілійованих людей</NavLink></li>\n            <li><NavLink to=\"/ccha\">Зміна кількості християн</NavLink></li>\n          </ul>\n          <div className=\"content\">\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/dom\" component={DominantReligion}/>\n            <Route path=\"/mus\" component={MuslimsPage}/>\n            <Route path=\"/unaf\" component={UnaffiliatedPage}/>\n            <Route path=\"/ccha\" component={ChristChange}/>\n          </div>\n        </div>\n      </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}